variables:
  REGISTRY: 221168245729.dkr.ecr.eu-north-1.amazonaws.com
  IMAGE: gigapress/front-office
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  TAG_VERSION_REGEX: /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/

stages:
  - build
  - delivery

# Template
.push_image_template:
  image: docker:20
  stage: build
  services:
    - docker:20-dind
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip install awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $REGISTRY
  cache: []

push image@dev:
  extends: .push_image_template
  script:
    - docker build --no-cache -t $IMAGE:dev .
    - docker tag $IMAGE:dev $REGISTRY/$IMAGE:dev
    - docker push $REGISTRY/$IMAGE:dev
  only:
    - dev

push image@staging:
  extends: .push_image_template
  script:
    - docker build --no-cache -t $IMAGE:staging .
    - docker tag $IMAGE:dev $REGISTRY/$IMAGE:staging
    - docker push $REGISTRY/$IMAGE:staging
  only:
    - staging

# Template
.deploy_template:
  image: "ubuntu"
  stage: delivery
  before_script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

    - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
    - ssh-keyscan $DEV_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  cache: []

deploy dev:
  extends: .deploy_template
  script:
    - ssh ubuntu@$DEV_IP "aws ecr get-login-password --profile catex | docker login --username AWS --password-stdin $REGISTRY"
    - ssh ubuntu@$DEV_IP "cd terminal/www/front-office && docker-compose pull && docker-compose up -d"
  only:
    - dev

deploy staging:
  extends: .deploy_template
  script:
    - ssh ubuntu@$DEV_IP "aws ecr get-login-password --profile catex | docker login --username AWS --password-stdin $REGISTRY"
    - ssh ubuntu@$DEV_IP "cd terminal/www/webapp && docker-compose pull && docker-compose up -d"
  only:
    - staging
